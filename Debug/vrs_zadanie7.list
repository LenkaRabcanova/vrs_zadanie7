
vrs_zadanie7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a8c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001c14  08001c14  00011c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c44  08001c44  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001c44  08001c44  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001c44  08001c44  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c44  08001c44  00011c44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001c48  08001c48  00011c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001c4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000020  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000002c  2000002c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000040b6  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000eb6  00000000  00000000  000240f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003c8  00000000  00000000  00024fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000340  00000000  00000000  00025370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018eb5  00000000  00000000  000256b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004e0e  00000000  00000000  0003e565  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000921f7  00000000  00000000  00043373  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000d556a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000d28  00000000  00000000  000d55c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001bfc 	.word	0x08001bfc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001bfc 	.word	0x08001bfc

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 f926 	bl	800041c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f803 	bl	80001da <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f83c 	bl	8000250 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001d8:	e7fe      	b.n	80001d8 <main+0x10>

080001da <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001da:	b580      	push	{r7, lr}
 80001dc:	b090      	sub	sp, #64	; 0x40
 80001de:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001e0:	f107 0318 	add.w	r3, r7, #24
 80001e4:	2228      	movs	r2, #40	; 0x28
 80001e6:	2100      	movs	r1, #0
 80001e8:	4618      	mov	r0, r3
 80001ea:	f001 fcff 	bl	8001bec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001ee:	1d3b      	adds	r3, r7, #4
 80001f0:	2200      	movs	r2, #0
 80001f2:	601a      	str	r2, [r3, #0]
 80001f4:	605a      	str	r2, [r3, #4]
 80001f6:	609a      	str	r2, [r3, #8]
 80001f8:	60da      	str	r2, [r3, #12]
 80001fa:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001fc:	2302      	movs	r3, #2
 80001fe:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000200:	2301      	movs	r3, #1
 8000202:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000204:	2310      	movs	r3, #16
 8000206:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000208:	2300      	movs	r3, #0
 800020a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800020c:	f107 0318 	add.w	r3, r7, #24
 8000210:	4618      	mov	r0, r3
 8000212:	f000 fbd9 	bl	80009c8 <HAL_RCC_OscConfig>
 8000216:	4603      	mov	r3, r0
 8000218:	2b00      	cmp	r3, #0
 800021a:	d001      	beq.n	8000220 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800021c:	f000 f86e 	bl	80002fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000220:	230f      	movs	r3, #15
 8000222:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000224:	2300      	movs	r3, #0
 8000226:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000228:	2300      	movs	r3, #0
 800022a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800022c:	2300      	movs	r3, #0
 800022e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000230:	2300      	movs	r3, #0
 8000232:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000234:	1d3b      	adds	r3, r7, #4
 8000236:	2100      	movs	r1, #0
 8000238:	4618      	mov	r0, r3
 800023a:	f001 facd 	bl	80017d8 <HAL_RCC_ClockConfig>
 800023e:	4603      	mov	r3, r0
 8000240:	2b00      	cmp	r3, #0
 8000242:	d001      	beq.n	8000248 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000244:	f000 f85a 	bl	80002fc <Error_Handler>
  }
}
 8000248:	bf00      	nop
 800024a:	3740      	adds	r7, #64	; 0x40
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}

08000250 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b088      	sub	sp, #32
 8000254:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000256:	f107 030c 	add.w	r3, r7, #12
 800025a:	2200      	movs	r2, #0
 800025c:	601a      	str	r2, [r3, #0]
 800025e:	605a      	str	r2, [r3, #4]
 8000260:	609a      	str	r2, [r3, #8]
 8000262:	60da      	str	r2, [r3, #12]
 8000264:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000266:	4b23      	ldr	r3, [pc, #140]	; (80002f4 <MX_GPIO_Init+0xa4>)
 8000268:	695b      	ldr	r3, [r3, #20]
 800026a:	4a22      	ldr	r2, [pc, #136]	; (80002f4 <MX_GPIO_Init+0xa4>)
 800026c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000270:	6153      	str	r3, [r2, #20]
 8000272:	4b20      	ldr	r3, [pc, #128]	; (80002f4 <MX_GPIO_Init+0xa4>)
 8000274:	695b      	ldr	r3, [r3, #20]
 8000276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800027a:	60bb      	str	r3, [r7, #8]
 800027c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800027e:	4b1d      	ldr	r3, [pc, #116]	; (80002f4 <MX_GPIO_Init+0xa4>)
 8000280:	695b      	ldr	r3, [r3, #20]
 8000282:	4a1c      	ldr	r2, [pc, #112]	; (80002f4 <MX_GPIO_Init+0xa4>)
 8000284:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000288:	6153      	str	r3, [r2, #20]
 800028a:	4b1a      	ldr	r3, [pc, #104]	; (80002f4 <MX_GPIO_Init+0xa4>)
 800028c:	695b      	ldr	r3, [r3, #20]
 800028e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000292:	607b      	str	r3, [r7, #4]
 8000294:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, segmentB_Pin|segmentA_Pin|digit3_Pin|segmentF_Pin
 8000296:	2200      	movs	r2, #0
 8000298:	f640 11ff 	movw	r1, #2559	; 0x9ff
 800029c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002a0:	f000 fb7a 	bl	8000998 <HAL_GPIO_WritePin>
                          |digit1_Pin|digit0_Pin|digit2_Pin|digitTime_Pin
                          |segmentC_Pin|segmentE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, segmentDP_Pin|segmentG_Pin|segmentD_Pin, GPIO_PIN_RESET);
 80002a4:	2200      	movs	r2, #0
 80002a6:	2132      	movs	r1, #50	; 0x32
 80002a8:	4813      	ldr	r0, [pc, #76]	; (80002f8 <MX_GPIO_Init+0xa8>)
 80002aa:	f000 fb75 	bl	8000998 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : segmentB_Pin segmentA_Pin digit3_Pin segmentF_Pin
                           digit1_Pin digit0_Pin digit2_Pin digitTime_Pin
                           segmentC_Pin segmentE_Pin */
  GPIO_InitStruct.Pin = segmentB_Pin|segmentA_Pin|digit3_Pin|segmentF_Pin
 80002ae:	f640 13ff 	movw	r3, #2559	; 0x9ff
 80002b2:	60fb      	str	r3, [r7, #12]
                          |digit1_Pin|digit0_Pin|digit2_Pin|digitTime_Pin
                          |segmentC_Pin|segmentE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002b4:	2301      	movs	r3, #1
 80002b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b8:	2300      	movs	r3, #0
 80002ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002bc:	2300      	movs	r3, #0
 80002be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002c0:	f107 030c 	add.w	r3, r7, #12
 80002c4:	4619      	mov	r1, r3
 80002c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002ca:	f000 f9f3 	bl	80006b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : segmentDP_Pin segmentG_Pin segmentD_Pin */
  GPIO_InitStruct.Pin = segmentDP_Pin|segmentG_Pin|segmentD_Pin;
 80002ce:	2332      	movs	r3, #50	; 0x32
 80002d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002d2:	2301      	movs	r3, #1
 80002d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002d6:	2300      	movs	r3, #0
 80002d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002da:	2300      	movs	r3, #0
 80002dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002de:	f107 030c 	add.w	r3, r7, #12
 80002e2:	4619      	mov	r1, r3
 80002e4:	4804      	ldr	r0, [pc, #16]	; (80002f8 <MX_GPIO_Init+0xa8>)
 80002e6:	f000 f9e5 	bl	80006b4 <HAL_GPIO_Init>

}
 80002ea:	bf00      	nop
 80002ec:	3720      	adds	r7, #32
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	40021000 	.word	0x40021000
 80002f8:	48000400 	.word	0x48000400

080002fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000300:	b672      	cpsid	i
}
 8000302:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000304:	e7fe      	b.n	8000304 <Error_Handler+0x8>
	...

08000308 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800030e:	4b0f      	ldr	r3, [pc, #60]	; (800034c <HAL_MspInit+0x44>)
 8000310:	699b      	ldr	r3, [r3, #24]
 8000312:	4a0e      	ldr	r2, [pc, #56]	; (800034c <HAL_MspInit+0x44>)
 8000314:	f043 0301 	orr.w	r3, r3, #1
 8000318:	6193      	str	r3, [r2, #24]
 800031a:	4b0c      	ldr	r3, [pc, #48]	; (800034c <HAL_MspInit+0x44>)
 800031c:	699b      	ldr	r3, [r3, #24]
 800031e:	f003 0301 	and.w	r3, r3, #1
 8000322:	607b      	str	r3, [r7, #4]
 8000324:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000326:	4b09      	ldr	r3, [pc, #36]	; (800034c <HAL_MspInit+0x44>)
 8000328:	69db      	ldr	r3, [r3, #28]
 800032a:	4a08      	ldr	r2, [pc, #32]	; (800034c <HAL_MspInit+0x44>)
 800032c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000330:	61d3      	str	r3, [r2, #28]
 8000332:	4b06      	ldr	r3, [pc, #24]	; (800034c <HAL_MspInit+0x44>)
 8000334:	69db      	ldr	r3, [r3, #28]
 8000336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800033a:	603b      	str	r3, [r7, #0]
 800033c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800033e:	bf00      	nop
 8000340:	370c      	adds	r7, #12
 8000342:	46bd      	mov	sp, r7
 8000344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000348:	4770      	bx	lr
 800034a:	bf00      	nop
 800034c:	40021000 	.word	0x40021000

08000350 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000354:	e7fe      	b.n	8000354 <NMI_Handler+0x4>

08000356 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000356:	b480      	push	{r7}
 8000358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800035a:	e7fe      	b.n	800035a <HardFault_Handler+0x4>

0800035c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000360:	e7fe      	b.n	8000360 <MemManage_Handler+0x4>

08000362 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000362:	b480      	push	{r7}
 8000364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000366:	e7fe      	b.n	8000366 <BusFault_Handler+0x4>

08000368 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800036c:	e7fe      	b.n	800036c <UsageFault_Handler+0x4>

0800036e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800036e:	b480      	push	{r7}
 8000370:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000372:	bf00      	nop
 8000374:	46bd      	mov	sp, r7
 8000376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037a:	4770      	bx	lr

0800037c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000380:	bf00      	nop
 8000382:	46bd      	mov	sp, r7
 8000384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000388:	4770      	bx	lr

0800038a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800038a:	b480      	push	{r7}
 800038c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800038e:	bf00      	nop
 8000390:	46bd      	mov	sp, r7
 8000392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000396:	4770      	bx	lr

08000398 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800039c:	f000 f884 	bl	80004a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003a0:	bf00      	nop
 80003a2:	bd80      	pop	{r7, pc}

080003a4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003a8:	4b06      	ldr	r3, [pc, #24]	; (80003c4 <SystemInit+0x20>)
 80003aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003ae:	4a05      	ldr	r2, [pc, #20]	; (80003c4 <SystemInit+0x20>)
 80003b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003b8:	bf00      	nop
 80003ba:	46bd      	mov	sp, r7
 80003bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c0:	4770      	bx	lr
 80003c2:	bf00      	nop
 80003c4:	e000ed00 	.word	0xe000ed00

080003c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80003c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000400 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003cc:	480d      	ldr	r0, [pc, #52]	; (8000404 <LoopForever+0x6>)
  ldr r1, =_edata
 80003ce:	490e      	ldr	r1, [pc, #56]	; (8000408 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003d0:	4a0e      	ldr	r2, [pc, #56]	; (800040c <LoopForever+0xe>)
  movs r3, #0
 80003d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003d4:	e002      	b.n	80003dc <LoopCopyDataInit>

080003d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003da:	3304      	adds	r3, #4

080003dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003e0:	d3f9      	bcc.n	80003d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003e2:	4a0b      	ldr	r2, [pc, #44]	; (8000410 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003e4:	4c0b      	ldr	r4, [pc, #44]	; (8000414 <LoopForever+0x16>)
  movs r3, #0
 80003e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003e8:	e001      	b.n	80003ee <LoopFillZerobss>

080003ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003ec:	3204      	adds	r2, #4

080003ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003f0:	d3fb      	bcc.n	80003ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80003f2:	f7ff ffd7 	bl	80003a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003f6:	f001 fbd5 	bl	8001ba4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80003fa:	f7ff fee5 	bl	80001c8 <main>

080003fe <LoopForever>:

LoopForever:
    b LoopForever
 80003fe:	e7fe      	b.n	80003fe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000400:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000404:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000408:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800040c:	08001c4c 	.word	0x08001c4c
  ldr r2, =_sbss
 8000410:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000414:	2000002c 	.word	0x2000002c

08000418 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000418:	e7fe      	b.n	8000418 <ADC1_2_IRQHandler>
	...

0800041c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000420:	4b08      	ldr	r3, [pc, #32]	; (8000444 <HAL_Init+0x28>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	4a07      	ldr	r2, [pc, #28]	; (8000444 <HAL_Init+0x28>)
 8000426:	f043 0310 	orr.w	r3, r3, #16
 800042a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800042c:	2003      	movs	r0, #3
 800042e:	f000 f90d 	bl	800064c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000432:	200f      	movs	r0, #15
 8000434:	f000 f808 	bl	8000448 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000438:	f7ff ff66 	bl	8000308 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800043c:	2300      	movs	r3, #0
}
 800043e:	4618      	mov	r0, r3
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	40022000 	.word	0x40022000

08000448 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000450:	4b12      	ldr	r3, [pc, #72]	; (800049c <HAL_InitTick+0x54>)
 8000452:	681a      	ldr	r2, [r3, #0]
 8000454:	4b12      	ldr	r3, [pc, #72]	; (80004a0 <HAL_InitTick+0x58>)
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	4619      	mov	r1, r3
 800045a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800045e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000462:	fbb2 f3f3 	udiv	r3, r2, r3
 8000466:	4618      	mov	r0, r3
 8000468:	f000 f917 	bl	800069a <HAL_SYSTICK_Config>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d001      	beq.n	8000476 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000472:	2301      	movs	r3, #1
 8000474:	e00e      	b.n	8000494 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	2b0f      	cmp	r3, #15
 800047a:	d80a      	bhi.n	8000492 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800047c:	2200      	movs	r2, #0
 800047e:	6879      	ldr	r1, [r7, #4]
 8000480:	f04f 30ff 	mov.w	r0, #4294967295
 8000484:	f000 f8ed 	bl	8000662 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000488:	4a06      	ldr	r2, [pc, #24]	; (80004a4 <HAL_InitTick+0x5c>)
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800048e:	2300      	movs	r3, #0
 8000490:	e000      	b.n	8000494 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000492:	2301      	movs	r3, #1
}
 8000494:	4618      	mov	r0, r3
 8000496:	3708      	adds	r7, #8
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}
 800049c:	20000000 	.word	0x20000000
 80004a0:	20000008 	.word	0x20000008
 80004a4:	20000004 	.word	0x20000004

080004a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004ac:	4b06      	ldr	r3, [pc, #24]	; (80004c8 <HAL_IncTick+0x20>)
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	461a      	mov	r2, r3
 80004b2:	4b06      	ldr	r3, [pc, #24]	; (80004cc <HAL_IncTick+0x24>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	4413      	add	r3, r2
 80004b8:	4a04      	ldr	r2, [pc, #16]	; (80004cc <HAL_IncTick+0x24>)
 80004ba:	6013      	str	r3, [r2, #0]
}
 80004bc:	bf00      	nop
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop
 80004c8:	20000008 	.word	0x20000008
 80004cc:	20000028 	.word	0x20000028

080004d0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  return uwTick;  
 80004d4:	4b03      	ldr	r3, [pc, #12]	; (80004e4 <HAL_GetTick+0x14>)
 80004d6:	681b      	ldr	r3, [r3, #0]
}
 80004d8:	4618      	mov	r0, r3
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop
 80004e4:	20000028 	.word	0x20000028

080004e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b085      	sub	sp, #20
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	f003 0307 	and.w	r3, r3, #7
 80004f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80004f8:	4b0c      	ldr	r3, [pc, #48]	; (800052c <__NVIC_SetPriorityGrouping+0x44>)
 80004fa:	68db      	ldr	r3, [r3, #12]
 80004fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80004fe:	68ba      	ldr	r2, [r7, #8]
 8000500:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000504:	4013      	ands	r3, r2
 8000506:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800050c:	68bb      	ldr	r3, [r7, #8]
 800050e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000510:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000514:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000518:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800051a:	4a04      	ldr	r2, [pc, #16]	; (800052c <__NVIC_SetPriorityGrouping+0x44>)
 800051c:	68bb      	ldr	r3, [r7, #8]
 800051e:	60d3      	str	r3, [r2, #12]
}
 8000520:	bf00      	nop
 8000522:	3714      	adds	r7, #20
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr
 800052c:	e000ed00 	.word	0xe000ed00

08000530 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000534:	4b04      	ldr	r3, [pc, #16]	; (8000548 <__NVIC_GetPriorityGrouping+0x18>)
 8000536:	68db      	ldr	r3, [r3, #12]
 8000538:	0a1b      	lsrs	r3, r3, #8
 800053a:	f003 0307 	and.w	r3, r3, #7
}
 800053e:	4618      	mov	r0, r3
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr
 8000548:	e000ed00 	.word	0xe000ed00

0800054c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	4603      	mov	r3, r0
 8000554:	6039      	str	r1, [r7, #0]
 8000556:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800055c:	2b00      	cmp	r3, #0
 800055e:	db0a      	blt.n	8000576 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	b2da      	uxtb	r2, r3
 8000564:	490c      	ldr	r1, [pc, #48]	; (8000598 <__NVIC_SetPriority+0x4c>)
 8000566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800056a:	0112      	lsls	r2, r2, #4
 800056c:	b2d2      	uxtb	r2, r2
 800056e:	440b      	add	r3, r1
 8000570:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000574:	e00a      	b.n	800058c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	b2da      	uxtb	r2, r3
 800057a:	4908      	ldr	r1, [pc, #32]	; (800059c <__NVIC_SetPriority+0x50>)
 800057c:	79fb      	ldrb	r3, [r7, #7]
 800057e:	f003 030f 	and.w	r3, r3, #15
 8000582:	3b04      	subs	r3, #4
 8000584:	0112      	lsls	r2, r2, #4
 8000586:	b2d2      	uxtb	r2, r2
 8000588:	440b      	add	r3, r1
 800058a:	761a      	strb	r2, [r3, #24]
}
 800058c:	bf00      	nop
 800058e:	370c      	adds	r7, #12
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr
 8000598:	e000e100 	.word	0xe000e100
 800059c:	e000ed00 	.word	0xe000ed00

080005a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b089      	sub	sp, #36	; 0x24
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	60f8      	str	r0, [r7, #12]
 80005a8:	60b9      	str	r1, [r7, #8]
 80005aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	f003 0307 	and.w	r3, r3, #7
 80005b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005b4:	69fb      	ldr	r3, [r7, #28]
 80005b6:	f1c3 0307 	rsb	r3, r3, #7
 80005ba:	2b04      	cmp	r3, #4
 80005bc:	bf28      	it	cs
 80005be:	2304      	movcs	r3, #4
 80005c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005c2:	69fb      	ldr	r3, [r7, #28]
 80005c4:	3304      	adds	r3, #4
 80005c6:	2b06      	cmp	r3, #6
 80005c8:	d902      	bls.n	80005d0 <NVIC_EncodePriority+0x30>
 80005ca:	69fb      	ldr	r3, [r7, #28]
 80005cc:	3b03      	subs	r3, #3
 80005ce:	e000      	b.n	80005d2 <NVIC_EncodePriority+0x32>
 80005d0:	2300      	movs	r3, #0
 80005d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005d4:	f04f 32ff 	mov.w	r2, #4294967295
 80005d8:	69bb      	ldr	r3, [r7, #24]
 80005da:	fa02 f303 	lsl.w	r3, r2, r3
 80005de:	43da      	mvns	r2, r3
 80005e0:	68bb      	ldr	r3, [r7, #8]
 80005e2:	401a      	ands	r2, r3
 80005e4:	697b      	ldr	r3, [r7, #20]
 80005e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005e8:	f04f 31ff 	mov.w	r1, #4294967295
 80005ec:	697b      	ldr	r3, [r7, #20]
 80005ee:	fa01 f303 	lsl.w	r3, r1, r3
 80005f2:	43d9      	mvns	r1, r3
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005f8:	4313      	orrs	r3, r2
         );
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	3724      	adds	r7, #36	; 0x24
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
	...

08000608 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	3b01      	subs	r3, #1
 8000614:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000618:	d301      	bcc.n	800061e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800061a:	2301      	movs	r3, #1
 800061c:	e00f      	b.n	800063e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800061e:	4a0a      	ldr	r2, [pc, #40]	; (8000648 <SysTick_Config+0x40>)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	3b01      	subs	r3, #1
 8000624:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000626:	210f      	movs	r1, #15
 8000628:	f04f 30ff 	mov.w	r0, #4294967295
 800062c:	f7ff ff8e 	bl	800054c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000630:	4b05      	ldr	r3, [pc, #20]	; (8000648 <SysTick_Config+0x40>)
 8000632:	2200      	movs	r2, #0
 8000634:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000636:	4b04      	ldr	r3, [pc, #16]	; (8000648 <SysTick_Config+0x40>)
 8000638:	2207      	movs	r2, #7
 800063a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800063c:	2300      	movs	r3, #0
}
 800063e:	4618      	mov	r0, r3
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	e000e010 	.word	0xe000e010

0800064c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000654:	6878      	ldr	r0, [r7, #4]
 8000656:	f7ff ff47 	bl	80004e8 <__NVIC_SetPriorityGrouping>
}
 800065a:	bf00      	nop
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}

08000662 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000662:	b580      	push	{r7, lr}
 8000664:	b086      	sub	sp, #24
 8000666:	af00      	add	r7, sp, #0
 8000668:	4603      	mov	r3, r0
 800066a:	60b9      	str	r1, [r7, #8]
 800066c:	607a      	str	r2, [r7, #4]
 800066e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000674:	f7ff ff5c 	bl	8000530 <__NVIC_GetPriorityGrouping>
 8000678:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800067a:	687a      	ldr	r2, [r7, #4]
 800067c:	68b9      	ldr	r1, [r7, #8]
 800067e:	6978      	ldr	r0, [r7, #20]
 8000680:	f7ff ff8e 	bl	80005a0 <NVIC_EncodePriority>
 8000684:	4602      	mov	r2, r0
 8000686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800068a:	4611      	mov	r1, r2
 800068c:	4618      	mov	r0, r3
 800068e:	f7ff ff5d 	bl	800054c <__NVIC_SetPriority>
}
 8000692:	bf00      	nop
 8000694:	3718      	adds	r7, #24
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}

0800069a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800069a:	b580      	push	{r7, lr}
 800069c:	b082      	sub	sp, #8
 800069e:	af00      	add	r7, sp, #0
 80006a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80006a2:	6878      	ldr	r0, [r7, #4]
 80006a4:	f7ff ffb0 	bl	8000608 <SysTick_Config>
 80006a8:	4603      	mov	r3, r0
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
	...

080006b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b087      	sub	sp, #28
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80006be:	2300      	movs	r3, #0
 80006c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80006c2:	e14e      	b.n	8000962 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	681a      	ldr	r2, [r3, #0]
 80006c8:	2101      	movs	r1, #1
 80006ca:	697b      	ldr	r3, [r7, #20]
 80006cc:	fa01 f303 	lsl.w	r3, r1, r3
 80006d0:	4013      	ands	r3, r2
 80006d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	f000 8140 	beq.w	800095c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	685b      	ldr	r3, [r3, #4]
 80006e0:	f003 0303 	and.w	r3, r3, #3
 80006e4:	2b01      	cmp	r3, #1
 80006e6:	d005      	beq.n	80006f4 <HAL_GPIO_Init+0x40>
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	685b      	ldr	r3, [r3, #4]
 80006ec:	f003 0303 	and.w	r3, r3, #3
 80006f0:	2b02      	cmp	r3, #2
 80006f2:	d130      	bne.n	8000756 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	689b      	ldr	r3, [r3, #8]
 80006f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	005b      	lsls	r3, r3, #1
 80006fe:	2203      	movs	r2, #3
 8000700:	fa02 f303 	lsl.w	r3, r2, r3
 8000704:	43db      	mvns	r3, r3
 8000706:	693a      	ldr	r2, [r7, #16]
 8000708:	4013      	ands	r3, r2
 800070a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	68da      	ldr	r2, [r3, #12]
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	005b      	lsls	r3, r3, #1
 8000714:	fa02 f303 	lsl.w	r3, r2, r3
 8000718:	693a      	ldr	r2, [r7, #16]
 800071a:	4313      	orrs	r3, r2
 800071c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	693a      	ldr	r2, [r7, #16]
 8000722:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	685b      	ldr	r3, [r3, #4]
 8000728:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800072a:	2201      	movs	r2, #1
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	fa02 f303 	lsl.w	r3, r2, r3
 8000732:	43db      	mvns	r3, r3
 8000734:	693a      	ldr	r2, [r7, #16]
 8000736:	4013      	ands	r3, r2
 8000738:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	685b      	ldr	r3, [r3, #4]
 800073e:	091b      	lsrs	r3, r3, #4
 8000740:	f003 0201 	and.w	r2, r3, #1
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	fa02 f303 	lsl.w	r3, r2, r3
 800074a:	693a      	ldr	r2, [r7, #16]
 800074c:	4313      	orrs	r3, r2
 800074e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	693a      	ldr	r2, [r7, #16]
 8000754:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	685b      	ldr	r3, [r3, #4]
 800075a:	f003 0303 	and.w	r3, r3, #3
 800075e:	2b03      	cmp	r3, #3
 8000760:	d017      	beq.n	8000792 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	68db      	ldr	r3, [r3, #12]
 8000766:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	005b      	lsls	r3, r3, #1
 800076c:	2203      	movs	r2, #3
 800076e:	fa02 f303 	lsl.w	r3, r2, r3
 8000772:	43db      	mvns	r3, r3
 8000774:	693a      	ldr	r2, [r7, #16]
 8000776:	4013      	ands	r3, r2
 8000778:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	689a      	ldr	r2, [r3, #8]
 800077e:	697b      	ldr	r3, [r7, #20]
 8000780:	005b      	lsls	r3, r3, #1
 8000782:	fa02 f303 	lsl.w	r3, r2, r3
 8000786:	693a      	ldr	r2, [r7, #16]
 8000788:	4313      	orrs	r3, r2
 800078a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	693a      	ldr	r2, [r7, #16]
 8000790:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	685b      	ldr	r3, [r3, #4]
 8000796:	f003 0303 	and.w	r3, r3, #3
 800079a:	2b02      	cmp	r3, #2
 800079c:	d123      	bne.n	80007e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800079e:	697b      	ldr	r3, [r7, #20]
 80007a0:	08da      	lsrs	r2, r3, #3
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	3208      	adds	r2, #8
 80007a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	f003 0307 	and.w	r3, r3, #7
 80007b2:	009b      	lsls	r3, r3, #2
 80007b4:	220f      	movs	r2, #15
 80007b6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ba:	43db      	mvns	r3, r3
 80007bc:	693a      	ldr	r2, [r7, #16]
 80007be:	4013      	ands	r3, r2
 80007c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	691a      	ldr	r2, [r3, #16]
 80007c6:	697b      	ldr	r3, [r7, #20]
 80007c8:	f003 0307 	and.w	r3, r3, #7
 80007cc:	009b      	lsls	r3, r3, #2
 80007ce:	fa02 f303 	lsl.w	r3, r2, r3
 80007d2:	693a      	ldr	r2, [r7, #16]
 80007d4:	4313      	orrs	r3, r2
 80007d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	08da      	lsrs	r2, r3, #3
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	3208      	adds	r2, #8
 80007e0:	6939      	ldr	r1, [r7, #16]
 80007e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	005b      	lsls	r3, r3, #1
 80007f0:	2203      	movs	r2, #3
 80007f2:	fa02 f303 	lsl.w	r3, r2, r3
 80007f6:	43db      	mvns	r3, r3
 80007f8:	693a      	ldr	r2, [r7, #16]
 80007fa:	4013      	ands	r3, r2
 80007fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	685b      	ldr	r3, [r3, #4]
 8000802:	f003 0203 	and.w	r2, r3, #3
 8000806:	697b      	ldr	r3, [r7, #20]
 8000808:	005b      	lsls	r3, r3, #1
 800080a:	fa02 f303 	lsl.w	r3, r2, r3
 800080e:	693a      	ldr	r2, [r7, #16]
 8000810:	4313      	orrs	r3, r2
 8000812:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	693a      	ldr	r2, [r7, #16]
 8000818:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	685b      	ldr	r3, [r3, #4]
 800081e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000822:	2b00      	cmp	r3, #0
 8000824:	f000 809a 	beq.w	800095c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000828:	4b55      	ldr	r3, [pc, #340]	; (8000980 <HAL_GPIO_Init+0x2cc>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	4a54      	ldr	r2, [pc, #336]	; (8000980 <HAL_GPIO_Init+0x2cc>)
 800082e:	f043 0301 	orr.w	r3, r3, #1
 8000832:	6193      	str	r3, [r2, #24]
 8000834:	4b52      	ldr	r3, [pc, #328]	; (8000980 <HAL_GPIO_Init+0x2cc>)
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	f003 0301 	and.w	r3, r3, #1
 800083c:	60bb      	str	r3, [r7, #8]
 800083e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000840:	4a50      	ldr	r2, [pc, #320]	; (8000984 <HAL_GPIO_Init+0x2d0>)
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	089b      	lsrs	r3, r3, #2
 8000846:	3302      	adds	r3, #2
 8000848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800084c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	f003 0303 	and.w	r3, r3, #3
 8000854:	009b      	lsls	r3, r3, #2
 8000856:	220f      	movs	r2, #15
 8000858:	fa02 f303 	lsl.w	r3, r2, r3
 800085c:	43db      	mvns	r3, r3
 800085e:	693a      	ldr	r2, [r7, #16]
 8000860:	4013      	ands	r3, r2
 8000862:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800086a:	d013      	beq.n	8000894 <HAL_GPIO_Init+0x1e0>
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	4a46      	ldr	r2, [pc, #280]	; (8000988 <HAL_GPIO_Init+0x2d4>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d00d      	beq.n	8000890 <HAL_GPIO_Init+0x1dc>
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	4a45      	ldr	r2, [pc, #276]	; (800098c <HAL_GPIO_Init+0x2d8>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d007      	beq.n	800088c <HAL_GPIO_Init+0x1d8>
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	4a44      	ldr	r2, [pc, #272]	; (8000990 <HAL_GPIO_Init+0x2dc>)
 8000880:	4293      	cmp	r3, r2
 8000882:	d101      	bne.n	8000888 <HAL_GPIO_Init+0x1d4>
 8000884:	2303      	movs	r3, #3
 8000886:	e006      	b.n	8000896 <HAL_GPIO_Init+0x1e2>
 8000888:	2305      	movs	r3, #5
 800088a:	e004      	b.n	8000896 <HAL_GPIO_Init+0x1e2>
 800088c:	2302      	movs	r3, #2
 800088e:	e002      	b.n	8000896 <HAL_GPIO_Init+0x1e2>
 8000890:	2301      	movs	r3, #1
 8000892:	e000      	b.n	8000896 <HAL_GPIO_Init+0x1e2>
 8000894:	2300      	movs	r3, #0
 8000896:	697a      	ldr	r2, [r7, #20]
 8000898:	f002 0203 	and.w	r2, r2, #3
 800089c:	0092      	lsls	r2, r2, #2
 800089e:	4093      	lsls	r3, r2
 80008a0:	693a      	ldr	r2, [r7, #16]
 80008a2:	4313      	orrs	r3, r2
 80008a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80008a6:	4937      	ldr	r1, [pc, #220]	; (8000984 <HAL_GPIO_Init+0x2d0>)
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	089b      	lsrs	r3, r3, #2
 80008ac:	3302      	adds	r3, #2
 80008ae:	693a      	ldr	r2, [r7, #16]
 80008b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80008b4:	4b37      	ldr	r3, [pc, #220]	; (8000994 <HAL_GPIO_Init+0x2e0>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	43db      	mvns	r3, r3
 80008be:	693a      	ldr	r2, [r7, #16]
 80008c0:	4013      	ands	r3, r2
 80008c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d003      	beq.n	80008d8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80008d0:	693a      	ldr	r2, [r7, #16]
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	4313      	orrs	r3, r2
 80008d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80008d8:	4a2e      	ldr	r2, [pc, #184]	; (8000994 <HAL_GPIO_Init+0x2e0>)
 80008da:	693b      	ldr	r3, [r7, #16]
 80008dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80008de:	4b2d      	ldr	r3, [pc, #180]	; (8000994 <HAL_GPIO_Init+0x2e0>)
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	43db      	mvns	r3, r3
 80008e8:	693a      	ldr	r2, [r7, #16]
 80008ea:	4013      	ands	r3, r2
 80008ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d003      	beq.n	8000902 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80008fa:	693a      	ldr	r2, [r7, #16]
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	4313      	orrs	r3, r2
 8000900:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000902:	4a24      	ldr	r2, [pc, #144]	; (8000994 <HAL_GPIO_Init+0x2e0>)
 8000904:	693b      	ldr	r3, [r7, #16]
 8000906:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000908:	4b22      	ldr	r3, [pc, #136]	; (8000994 <HAL_GPIO_Init+0x2e0>)
 800090a:	689b      	ldr	r3, [r3, #8]
 800090c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	43db      	mvns	r3, r3
 8000912:	693a      	ldr	r2, [r7, #16]
 8000914:	4013      	ands	r3, r2
 8000916:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000920:	2b00      	cmp	r3, #0
 8000922:	d003      	beq.n	800092c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000924:	693a      	ldr	r2, [r7, #16]
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	4313      	orrs	r3, r2
 800092a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800092c:	4a19      	ldr	r2, [pc, #100]	; (8000994 <HAL_GPIO_Init+0x2e0>)
 800092e:	693b      	ldr	r3, [r7, #16]
 8000930:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000932:	4b18      	ldr	r3, [pc, #96]	; (8000994 <HAL_GPIO_Init+0x2e0>)
 8000934:	68db      	ldr	r3, [r3, #12]
 8000936:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	43db      	mvns	r3, r3
 800093c:	693a      	ldr	r2, [r7, #16]
 800093e:	4013      	ands	r3, r2
 8000940:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800094a:	2b00      	cmp	r3, #0
 800094c:	d003      	beq.n	8000956 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800094e:	693a      	ldr	r2, [r7, #16]
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	4313      	orrs	r3, r2
 8000954:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000956:	4a0f      	ldr	r2, [pc, #60]	; (8000994 <HAL_GPIO_Init+0x2e0>)
 8000958:	693b      	ldr	r3, [r7, #16]
 800095a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	3301      	adds	r3, #1
 8000960:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	fa22 f303 	lsr.w	r3, r2, r3
 800096c:	2b00      	cmp	r3, #0
 800096e:	f47f aea9 	bne.w	80006c4 <HAL_GPIO_Init+0x10>
  }
}
 8000972:	bf00      	nop
 8000974:	bf00      	nop
 8000976:	371c      	adds	r7, #28
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr
 8000980:	40021000 	.word	0x40021000
 8000984:	40010000 	.word	0x40010000
 8000988:	48000400 	.word	0x48000400
 800098c:	48000800 	.word	0x48000800
 8000990:	48000c00 	.word	0x48000c00
 8000994:	40010400 	.word	0x40010400

08000998 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	460b      	mov	r3, r1
 80009a2:	807b      	strh	r3, [r7, #2]
 80009a4:	4613      	mov	r3, r2
 80009a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80009a8:	787b      	ldrb	r3, [r7, #1]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d003      	beq.n	80009b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80009ae:	887a      	ldrh	r2, [r7, #2]
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80009b4:	e002      	b.n	80009bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80009b6:	887a      	ldrh	r2, [r7, #2]
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80009bc:	bf00      	nop
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	1d3b      	adds	r3, r7, #4
 80009d2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80009d4:	1d3b      	adds	r3, r7, #4
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d102      	bne.n	80009e2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80009dc:	2301      	movs	r3, #1
 80009de:	f000 bef4 	b.w	80017ca <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009e2:	1d3b      	adds	r3, r7, #4
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f003 0301 	and.w	r3, r3, #1
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	f000 816a 	beq.w	8000cc6 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80009f2:	4bb3      	ldr	r3, [pc, #716]	; (8000cc0 <HAL_RCC_OscConfig+0x2f8>)
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	f003 030c 	and.w	r3, r3, #12
 80009fa:	2b04      	cmp	r3, #4
 80009fc:	d00c      	beq.n	8000a18 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80009fe:	4bb0      	ldr	r3, [pc, #704]	; (8000cc0 <HAL_RCC_OscConfig+0x2f8>)
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	f003 030c 	and.w	r3, r3, #12
 8000a06:	2b08      	cmp	r3, #8
 8000a08:	d159      	bne.n	8000abe <HAL_RCC_OscConfig+0xf6>
 8000a0a:	4bad      	ldr	r3, [pc, #692]	; (8000cc0 <HAL_RCC_OscConfig+0x2f8>)
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a16:	d152      	bne.n	8000abe <HAL_RCC_OscConfig+0xf6>
 8000a18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a1c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a20:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000a24:	fa93 f3a3 	rbit	r3, r3
 8000a28:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000a2c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a30:	fab3 f383 	clz	r3, r3
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	095b      	lsrs	r3, r3, #5
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	f043 0301 	orr.w	r3, r3, #1
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d102      	bne.n	8000a4a <HAL_RCC_OscConfig+0x82>
 8000a44:	4b9e      	ldr	r3, [pc, #632]	; (8000cc0 <HAL_RCC_OscConfig+0x2f8>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	e015      	b.n	8000a76 <HAL_RCC_OscConfig+0xae>
 8000a4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a4e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a52:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000a56:	fa93 f3a3 	rbit	r3, r3
 8000a5a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000a5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a62:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000a66:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000a6a:	fa93 f3a3 	rbit	r3, r3
 8000a6e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000a72:	4b93      	ldr	r3, [pc, #588]	; (8000cc0 <HAL_RCC_OscConfig+0x2f8>)
 8000a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a76:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a7a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000a7e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000a82:	fa92 f2a2 	rbit	r2, r2
 8000a86:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000a8a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000a8e:	fab2 f282 	clz	r2, r2
 8000a92:	b2d2      	uxtb	r2, r2
 8000a94:	f042 0220 	orr.w	r2, r2, #32
 8000a98:	b2d2      	uxtb	r2, r2
 8000a9a:	f002 021f 	and.w	r2, r2, #31
 8000a9e:	2101      	movs	r1, #1
 8000aa0:	fa01 f202 	lsl.w	r2, r1, r2
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	f000 810c 	beq.w	8000cc4 <HAL_RCC_OscConfig+0x2fc>
 8000aac:	1d3b      	adds	r3, r7, #4
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	f040 8106 	bne.w	8000cc4 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	f000 be86 	b.w	80017ca <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000abe:	1d3b      	adds	r3, r7, #4
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ac8:	d106      	bne.n	8000ad8 <HAL_RCC_OscConfig+0x110>
 8000aca:	4b7d      	ldr	r3, [pc, #500]	; (8000cc0 <HAL_RCC_OscConfig+0x2f8>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a7c      	ldr	r2, [pc, #496]	; (8000cc0 <HAL_RCC_OscConfig+0x2f8>)
 8000ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ad4:	6013      	str	r3, [r2, #0]
 8000ad6:	e030      	b.n	8000b3a <HAL_RCC_OscConfig+0x172>
 8000ad8:	1d3b      	adds	r3, r7, #4
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d10c      	bne.n	8000afc <HAL_RCC_OscConfig+0x134>
 8000ae2:	4b77      	ldr	r3, [pc, #476]	; (8000cc0 <HAL_RCC_OscConfig+0x2f8>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a76      	ldr	r2, [pc, #472]	; (8000cc0 <HAL_RCC_OscConfig+0x2f8>)
 8000ae8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000aec:	6013      	str	r3, [r2, #0]
 8000aee:	4b74      	ldr	r3, [pc, #464]	; (8000cc0 <HAL_RCC_OscConfig+0x2f8>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a73      	ldr	r2, [pc, #460]	; (8000cc0 <HAL_RCC_OscConfig+0x2f8>)
 8000af4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000af8:	6013      	str	r3, [r2, #0]
 8000afa:	e01e      	b.n	8000b3a <HAL_RCC_OscConfig+0x172>
 8000afc:	1d3b      	adds	r3, r7, #4
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b06:	d10c      	bne.n	8000b22 <HAL_RCC_OscConfig+0x15a>
 8000b08:	4b6d      	ldr	r3, [pc, #436]	; (8000cc0 <HAL_RCC_OscConfig+0x2f8>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a6c      	ldr	r2, [pc, #432]	; (8000cc0 <HAL_RCC_OscConfig+0x2f8>)
 8000b0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b12:	6013      	str	r3, [r2, #0]
 8000b14:	4b6a      	ldr	r3, [pc, #424]	; (8000cc0 <HAL_RCC_OscConfig+0x2f8>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a69      	ldr	r2, [pc, #420]	; (8000cc0 <HAL_RCC_OscConfig+0x2f8>)
 8000b1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b1e:	6013      	str	r3, [r2, #0]
 8000b20:	e00b      	b.n	8000b3a <HAL_RCC_OscConfig+0x172>
 8000b22:	4b67      	ldr	r3, [pc, #412]	; (8000cc0 <HAL_RCC_OscConfig+0x2f8>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a66      	ldr	r2, [pc, #408]	; (8000cc0 <HAL_RCC_OscConfig+0x2f8>)
 8000b28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b2c:	6013      	str	r3, [r2, #0]
 8000b2e:	4b64      	ldr	r3, [pc, #400]	; (8000cc0 <HAL_RCC_OscConfig+0x2f8>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a63      	ldr	r2, [pc, #396]	; (8000cc0 <HAL_RCC_OscConfig+0x2f8>)
 8000b34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b38:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000b3a:	4b61      	ldr	r3, [pc, #388]	; (8000cc0 <HAL_RCC_OscConfig+0x2f8>)
 8000b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b3e:	f023 020f 	bic.w	r2, r3, #15
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	689b      	ldr	r3, [r3, #8]
 8000b48:	495d      	ldr	r1, [pc, #372]	; (8000cc0 <HAL_RCC_OscConfig+0x2f8>)
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b4e:	1d3b      	adds	r3, r7, #4
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d059      	beq.n	8000c0c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b58:	f7ff fcba 	bl	80004d0 <HAL_GetTick>
 8000b5c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b60:	e00a      	b.n	8000b78 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b62:	f7ff fcb5 	bl	80004d0 <HAL_GetTick>
 8000b66:	4602      	mov	r2, r0
 8000b68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000b6c:	1ad3      	subs	r3, r2, r3
 8000b6e:	2b64      	cmp	r3, #100	; 0x64
 8000b70:	d902      	bls.n	8000b78 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8000b72:	2303      	movs	r3, #3
 8000b74:	f000 be29 	b.w	80017ca <HAL_RCC_OscConfig+0xe02>
 8000b78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b7c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b80:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000b84:	fa93 f3a3 	rbit	r3, r3
 8000b88:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000b8c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b90:	fab3 f383 	clz	r3, r3
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	095b      	lsrs	r3, r3, #5
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	f043 0301 	orr.w	r3, r3, #1
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d102      	bne.n	8000baa <HAL_RCC_OscConfig+0x1e2>
 8000ba4:	4b46      	ldr	r3, [pc, #280]	; (8000cc0 <HAL_RCC_OscConfig+0x2f8>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	e015      	b.n	8000bd6 <HAL_RCC_OscConfig+0x20e>
 8000baa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bae:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bb2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000bb6:	fa93 f3a3 	rbit	r3, r3
 8000bba:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000bbe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bc2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000bc6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000bca:	fa93 f3a3 	rbit	r3, r3
 8000bce:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000bd2:	4b3b      	ldr	r3, [pc, #236]	; (8000cc0 <HAL_RCC_OscConfig+0x2f8>)
 8000bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bd6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000bda:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000bde:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000be2:	fa92 f2a2 	rbit	r2, r2
 8000be6:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000bea:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b2d2      	uxtb	r2, r2
 8000bf4:	f042 0220 	orr.w	r2, r2, #32
 8000bf8:	b2d2      	uxtb	r2, r2
 8000bfa:	f002 021f 	and.w	r2, r2, #31
 8000bfe:	2101      	movs	r1, #1
 8000c00:	fa01 f202 	lsl.w	r2, r1, r2
 8000c04:	4013      	ands	r3, r2
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d0ab      	beq.n	8000b62 <HAL_RCC_OscConfig+0x19a>
 8000c0a:	e05c      	b.n	8000cc6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c0c:	f7ff fc60 	bl	80004d0 <HAL_GetTick>
 8000c10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c14:	e00a      	b.n	8000c2c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c16:	f7ff fc5b 	bl	80004d0 <HAL_GetTick>
 8000c1a:	4602      	mov	r2, r0
 8000c1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	2b64      	cmp	r3, #100	; 0x64
 8000c24:	d902      	bls.n	8000c2c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8000c26:	2303      	movs	r3, #3
 8000c28:	f000 bdcf 	b.w	80017ca <HAL_RCC_OscConfig+0xe02>
 8000c2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c30:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c34:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000c38:	fa93 f3a3 	rbit	r3, r3
 8000c3c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000c40:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c44:	fab3 f383 	clz	r3, r3
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	095b      	lsrs	r3, r3, #5
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	f043 0301 	orr.w	r3, r3, #1
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d102      	bne.n	8000c5e <HAL_RCC_OscConfig+0x296>
 8000c58:	4b19      	ldr	r3, [pc, #100]	; (8000cc0 <HAL_RCC_OscConfig+0x2f8>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	e015      	b.n	8000c8a <HAL_RCC_OscConfig+0x2c2>
 8000c5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c62:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c66:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000c6a:	fa93 f3a3 	rbit	r3, r3
 8000c6e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000c72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c76:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000c7a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000c7e:	fa93 f3a3 	rbit	r3, r3
 8000c82:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000c86:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <HAL_RCC_OscConfig+0x2f8>)
 8000c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c8a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c8e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000c92:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000c96:	fa92 f2a2 	rbit	r2, r2
 8000c9a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000c9e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000ca2:	fab2 f282 	clz	r2, r2
 8000ca6:	b2d2      	uxtb	r2, r2
 8000ca8:	f042 0220 	orr.w	r2, r2, #32
 8000cac:	b2d2      	uxtb	r2, r2
 8000cae:	f002 021f 	and.w	r2, r2, #31
 8000cb2:	2101      	movs	r1, #1
 8000cb4:	fa01 f202 	lsl.w	r2, r1, r2
 8000cb8:	4013      	ands	r3, r2
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d1ab      	bne.n	8000c16 <HAL_RCC_OscConfig+0x24e>
 8000cbe:	e002      	b.n	8000cc6 <HAL_RCC_OscConfig+0x2fe>
 8000cc0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cc6:	1d3b      	adds	r3, r7, #4
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f003 0302 	and.w	r3, r3, #2
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	f000 816f 	beq.w	8000fb4 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000cd6:	4bd0      	ldr	r3, [pc, #832]	; (8001018 <HAL_RCC_OscConfig+0x650>)
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	f003 030c 	and.w	r3, r3, #12
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d00b      	beq.n	8000cfa <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000ce2:	4bcd      	ldr	r3, [pc, #820]	; (8001018 <HAL_RCC_OscConfig+0x650>)
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f003 030c 	and.w	r3, r3, #12
 8000cea:	2b08      	cmp	r3, #8
 8000cec:	d16c      	bne.n	8000dc8 <HAL_RCC_OscConfig+0x400>
 8000cee:	4bca      	ldr	r3, [pc, #808]	; (8001018 <HAL_RCC_OscConfig+0x650>)
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d166      	bne.n	8000dc8 <HAL_RCC_OscConfig+0x400>
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d00:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000d04:	fa93 f3a3 	rbit	r3, r3
 8000d08:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8000d0c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d10:	fab3 f383 	clz	r3, r3
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	095b      	lsrs	r3, r3, #5
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	f043 0301 	orr.w	r3, r3, #1
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d102      	bne.n	8000d2a <HAL_RCC_OscConfig+0x362>
 8000d24:	4bbc      	ldr	r3, [pc, #752]	; (8001018 <HAL_RCC_OscConfig+0x650>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	e013      	b.n	8000d52 <HAL_RCC_OscConfig+0x38a>
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d30:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000d34:	fa93 f3a3 	rbit	r3, r3
 8000d38:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000d42:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000d46:	fa93 f3a3 	rbit	r3, r3
 8000d4a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8000d4e:	4bb2      	ldr	r3, [pc, #712]	; (8001018 <HAL_RCC_OscConfig+0x650>)
 8000d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d52:	2202      	movs	r2, #2
 8000d54:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8000d58:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000d5c:	fa92 f2a2 	rbit	r2, r2
 8000d60:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8000d64:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8000d68:	fab2 f282 	clz	r2, r2
 8000d6c:	b2d2      	uxtb	r2, r2
 8000d6e:	f042 0220 	orr.w	r2, r2, #32
 8000d72:	b2d2      	uxtb	r2, r2
 8000d74:	f002 021f 	and.w	r2, r2, #31
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d7e:	4013      	ands	r3, r2
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d007      	beq.n	8000d94 <HAL_RCC_OscConfig+0x3cc>
 8000d84:	1d3b      	adds	r3, r7, #4
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	691b      	ldr	r3, [r3, #16]
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d002      	beq.n	8000d94 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	f000 bd1b 	b.w	80017ca <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d94:	4ba0      	ldr	r3, [pc, #640]	; (8001018 <HAL_RCC_OscConfig+0x650>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	695b      	ldr	r3, [r3, #20]
 8000da2:	21f8      	movs	r1, #248	; 0xf8
 8000da4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000da8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8000dac:	fa91 f1a1 	rbit	r1, r1
 8000db0:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8000db4:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8000db8:	fab1 f181 	clz	r1, r1
 8000dbc:	b2c9      	uxtb	r1, r1
 8000dbe:	408b      	lsls	r3, r1
 8000dc0:	4995      	ldr	r1, [pc, #596]	; (8001018 <HAL_RCC_OscConfig+0x650>)
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dc6:	e0f5      	b.n	8000fb4 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000dc8:	1d3b      	adds	r3, r7, #4
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	691b      	ldr	r3, [r3, #16]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	f000 8085 	beq.w	8000ede <HAL_RCC_OscConfig+0x516>
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dda:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8000dde:	fa93 f3a3 	rbit	r3, r3
 8000de2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8000de6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000dea:	fab3 f383 	clz	r3, r3
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000df4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e00:	f7ff fb66 	bl	80004d0 <HAL_GetTick>
 8000e04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e08:	e00a      	b.n	8000e20 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e0a:	f7ff fb61 	bl	80004d0 <HAL_GetTick>
 8000e0e:	4602      	mov	r2, r0
 8000e10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	2b02      	cmp	r3, #2
 8000e18:	d902      	bls.n	8000e20 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	f000 bcd5 	b.w	80017ca <HAL_RCC_OscConfig+0xe02>
 8000e20:	2302      	movs	r3, #2
 8000e22:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e26:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8000e2a:	fa93 f3a3 	rbit	r3, r3
 8000e2e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8000e32:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e36:	fab3 f383 	clz	r3, r3
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	095b      	lsrs	r3, r3, #5
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	f043 0301 	orr.w	r3, r3, #1
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d102      	bne.n	8000e50 <HAL_RCC_OscConfig+0x488>
 8000e4a:	4b73      	ldr	r3, [pc, #460]	; (8001018 <HAL_RCC_OscConfig+0x650>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	e013      	b.n	8000e78 <HAL_RCC_OscConfig+0x4b0>
 8000e50:	2302      	movs	r3, #2
 8000e52:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e56:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8000e5a:	fa93 f3a3 	rbit	r3, r3
 8000e5e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000e62:	2302      	movs	r3, #2
 8000e64:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000e68:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8000e6c:	fa93 f3a3 	rbit	r3, r3
 8000e70:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8000e74:	4b68      	ldr	r3, [pc, #416]	; (8001018 <HAL_RCC_OscConfig+0x650>)
 8000e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e78:	2202      	movs	r2, #2
 8000e7a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8000e7e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000e82:	fa92 f2a2 	rbit	r2, r2
 8000e86:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8000e8a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8000e8e:	fab2 f282 	clz	r2, r2
 8000e92:	b2d2      	uxtb	r2, r2
 8000e94:	f042 0220 	orr.w	r2, r2, #32
 8000e98:	b2d2      	uxtb	r2, r2
 8000e9a:	f002 021f 	and.w	r2, r2, #31
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d0af      	beq.n	8000e0a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eaa:	4b5b      	ldr	r3, [pc, #364]	; (8001018 <HAL_RCC_OscConfig+0x650>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000eb2:	1d3b      	adds	r3, r7, #4
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	695b      	ldr	r3, [r3, #20]
 8000eb8:	21f8      	movs	r1, #248	; 0xf8
 8000eba:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ebe:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8000ec2:	fa91 f1a1 	rbit	r1, r1
 8000ec6:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8000eca:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8000ece:	fab1 f181 	clz	r1, r1
 8000ed2:	b2c9      	uxtb	r1, r1
 8000ed4:	408b      	lsls	r3, r1
 8000ed6:	4950      	ldr	r1, [pc, #320]	; (8001018 <HAL_RCC_OscConfig+0x650>)
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	600b      	str	r3, [r1, #0]
 8000edc:	e06a      	b.n	8000fb4 <HAL_RCC_OscConfig+0x5ec>
 8000ede:	2301      	movs	r3, #1
 8000ee0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ee4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8000ee8:	fa93 f3a3 	rbit	r3, r3
 8000eec:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8000ef0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ef4:	fab3 f383 	clz	r3, r3
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000efe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	461a      	mov	r2, r3
 8000f06:	2300      	movs	r3, #0
 8000f08:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f0a:	f7ff fae1 	bl	80004d0 <HAL_GetTick>
 8000f0e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f12:	e00a      	b.n	8000f2a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f14:	f7ff fadc 	bl	80004d0 <HAL_GetTick>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f1e:	1ad3      	subs	r3, r2, r3
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d902      	bls.n	8000f2a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8000f24:	2303      	movs	r3, #3
 8000f26:	f000 bc50 	b.w	80017ca <HAL_RCC_OscConfig+0xe02>
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f30:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000f34:	fa93 f3a3 	rbit	r3, r3
 8000f38:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8000f3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f40:	fab3 f383 	clz	r3, r3
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	095b      	lsrs	r3, r3, #5
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	f043 0301 	orr.w	r3, r3, #1
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d102      	bne.n	8000f5a <HAL_RCC_OscConfig+0x592>
 8000f54:	4b30      	ldr	r3, [pc, #192]	; (8001018 <HAL_RCC_OscConfig+0x650>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	e013      	b.n	8000f82 <HAL_RCC_OscConfig+0x5ba>
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f60:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000f64:	fa93 f3a3 	rbit	r3, r3
 8000f68:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000f72:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000f76:	fa93 f3a3 	rbit	r3, r3
 8000f7a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8000f7e:	4b26      	ldr	r3, [pc, #152]	; (8001018 <HAL_RCC_OscConfig+0x650>)
 8000f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f82:	2202      	movs	r2, #2
 8000f84:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8000f88:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000f8c:	fa92 f2a2 	rbit	r2, r2
 8000f90:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8000f94:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000f98:	fab2 f282 	clz	r2, r2
 8000f9c:	b2d2      	uxtb	r2, r2
 8000f9e:	f042 0220 	orr.w	r2, r2, #32
 8000fa2:	b2d2      	uxtb	r2, r2
 8000fa4:	f002 021f 	and.w	r2, r2, #31
 8000fa8:	2101      	movs	r1, #1
 8000faa:	fa01 f202 	lsl.w	r2, r1, r2
 8000fae:	4013      	ands	r3, r2
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d1af      	bne.n	8000f14 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fb4:	1d3b      	adds	r3, r7, #4
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f003 0308 	and.w	r3, r3, #8
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	f000 80da 	beq.w	8001178 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fc4:	1d3b      	adds	r3, r7, #4
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	699b      	ldr	r3, [r3, #24]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d069      	beq.n	80010a2 <HAL_RCC_OscConfig+0x6da>
 8000fce:	2301      	movs	r3, #1
 8000fd0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fd4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000fd8:	fa93 f3a3 	rbit	r3, r3
 8000fdc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8000fe0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fe4:	fab3 f383 	clz	r3, r3
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	461a      	mov	r2, r3
 8000fec:	4b0b      	ldr	r3, [pc, #44]	; (800101c <HAL_RCC_OscConfig+0x654>)
 8000fee:	4413      	add	r3, r2
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ff8:	f7ff fa6a 	bl	80004d0 <HAL_GetTick>
 8000ffc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001000:	e00e      	b.n	8001020 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001002:	f7ff fa65 	bl	80004d0 <HAL_GetTick>
 8001006:	4602      	mov	r2, r0
 8001008:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	2b02      	cmp	r3, #2
 8001010:	d906      	bls.n	8001020 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001012:	2303      	movs	r3, #3
 8001014:	e3d9      	b.n	80017ca <HAL_RCC_OscConfig+0xe02>
 8001016:	bf00      	nop
 8001018:	40021000 	.word	0x40021000
 800101c:	10908120 	.word	0x10908120
 8001020:	2302      	movs	r3, #2
 8001022:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001026:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800102a:	fa93 f3a3 	rbit	r3, r3
 800102e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001032:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001036:	2202      	movs	r2, #2
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	fa93 f2a3 	rbit	r2, r3
 8001044:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800104e:	2202      	movs	r2, #2
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	fa93 f2a3 	rbit	r2, r3
 800105c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001060:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001062:	4ba5      	ldr	r3, [pc, #660]	; (80012f8 <HAL_RCC_OscConfig+0x930>)
 8001064:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001066:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800106a:	2102      	movs	r1, #2
 800106c:	6019      	str	r1, [r3, #0]
 800106e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	fa93 f1a3 	rbit	r1, r3
 8001078:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800107c:	6019      	str	r1, [r3, #0]
  return result;
 800107e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	fab3 f383 	clz	r3, r3
 8001088:	b2db      	uxtb	r3, r3
 800108a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800108e:	b2db      	uxtb	r3, r3
 8001090:	f003 031f 	and.w	r3, r3, #31
 8001094:	2101      	movs	r1, #1
 8001096:	fa01 f303 	lsl.w	r3, r1, r3
 800109a:	4013      	ands	r3, r2
 800109c:	2b00      	cmp	r3, #0
 800109e:	d0b0      	beq.n	8001002 <HAL_RCC_OscConfig+0x63a>
 80010a0:	e06a      	b.n	8001178 <HAL_RCC_OscConfig+0x7b0>
 80010a2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80010a6:	2201      	movs	r2, #1
 80010a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010aa:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	fa93 f2a3 	rbit	r2, r3
 80010b4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80010b8:	601a      	str	r2, [r3, #0]
  return result;
 80010ba:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80010be:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010c0:	fab3 f383 	clz	r3, r3
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	461a      	mov	r2, r3
 80010c8:	4b8c      	ldr	r3, [pc, #560]	; (80012fc <HAL_RCC_OscConfig+0x934>)
 80010ca:	4413      	add	r3, r2
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	461a      	mov	r2, r3
 80010d0:	2300      	movs	r3, #0
 80010d2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010d4:	f7ff f9fc 	bl	80004d0 <HAL_GetTick>
 80010d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010dc:	e009      	b.n	80010f2 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010de:	f7ff f9f7 	bl	80004d0 <HAL_GetTick>
 80010e2:	4602      	mov	r2, r0
 80010e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d901      	bls.n	80010f2 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80010ee:	2303      	movs	r3, #3
 80010f0:	e36b      	b.n	80017ca <HAL_RCC_OscConfig+0xe02>
 80010f2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80010f6:	2202      	movs	r2, #2
 80010f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010fa:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	fa93 f2a3 	rbit	r2, r3
 8001104:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800110e:	2202      	movs	r2, #2
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	fa93 f2a3 	rbit	r2, r3
 800111c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001126:	2202      	movs	r2, #2
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	fa93 f2a3 	rbit	r2, r3
 8001134:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001138:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800113a:	4b6f      	ldr	r3, [pc, #444]	; (80012f8 <HAL_RCC_OscConfig+0x930>)
 800113c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800113e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001142:	2102      	movs	r1, #2
 8001144:	6019      	str	r1, [r3, #0]
 8001146:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	fa93 f1a3 	rbit	r1, r3
 8001150:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001154:	6019      	str	r1, [r3, #0]
  return result;
 8001156:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	fab3 f383 	clz	r3, r3
 8001160:	b2db      	uxtb	r3, r3
 8001162:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001166:	b2db      	uxtb	r3, r3
 8001168:	f003 031f 	and.w	r3, r3, #31
 800116c:	2101      	movs	r1, #1
 800116e:	fa01 f303 	lsl.w	r3, r1, r3
 8001172:	4013      	ands	r3, r2
 8001174:	2b00      	cmp	r3, #0
 8001176:	d1b2      	bne.n	80010de <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0304 	and.w	r3, r3, #4
 8001182:	2b00      	cmp	r3, #0
 8001184:	f000 8158 	beq.w	8001438 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001188:	2300      	movs	r3, #0
 800118a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800118e:	4b5a      	ldr	r3, [pc, #360]	; (80012f8 <HAL_RCC_OscConfig+0x930>)
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d112      	bne.n	80011c0 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800119a:	4b57      	ldr	r3, [pc, #348]	; (80012f8 <HAL_RCC_OscConfig+0x930>)
 800119c:	69db      	ldr	r3, [r3, #28]
 800119e:	4a56      	ldr	r2, [pc, #344]	; (80012f8 <HAL_RCC_OscConfig+0x930>)
 80011a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a4:	61d3      	str	r3, [r2, #28]
 80011a6:	4b54      	ldr	r3, [pc, #336]	; (80012f8 <HAL_RCC_OscConfig+0x930>)
 80011a8:	69db      	ldr	r3, [r3, #28]
 80011aa:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80011ae:	f107 0308 	add.w	r3, r7, #8
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	f107 0308 	add.w	r3, r7, #8
 80011b8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80011ba:	2301      	movs	r3, #1
 80011bc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011c0:	4b4f      	ldr	r3, [pc, #316]	; (8001300 <HAL_RCC_OscConfig+0x938>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d11a      	bne.n	8001202 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011cc:	4b4c      	ldr	r3, [pc, #304]	; (8001300 <HAL_RCC_OscConfig+0x938>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a4b      	ldr	r2, [pc, #300]	; (8001300 <HAL_RCC_OscConfig+0x938>)
 80011d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011d6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011d8:	f7ff f97a 	bl	80004d0 <HAL_GetTick>
 80011dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011e0:	e009      	b.n	80011f6 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011e2:	f7ff f975 	bl	80004d0 <HAL_GetTick>
 80011e6:	4602      	mov	r2, r0
 80011e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b64      	cmp	r3, #100	; 0x64
 80011f0:	d901      	bls.n	80011f6 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e2e9      	b.n	80017ca <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011f6:	4b42      	ldr	r3, [pc, #264]	; (8001300 <HAL_RCC_OscConfig+0x938>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d0ef      	beq.n	80011e2 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001202:	1d3b      	adds	r3, r7, #4
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d106      	bne.n	800121a <HAL_RCC_OscConfig+0x852>
 800120c:	4b3a      	ldr	r3, [pc, #232]	; (80012f8 <HAL_RCC_OscConfig+0x930>)
 800120e:	6a1b      	ldr	r3, [r3, #32]
 8001210:	4a39      	ldr	r2, [pc, #228]	; (80012f8 <HAL_RCC_OscConfig+0x930>)
 8001212:	f043 0301 	orr.w	r3, r3, #1
 8001216:	6213      	str	r3, [r2, #32]
 8001218:	e02f      	b.n	800127a <HAL_RCC_OscConfig+0x8b2>
 800121a:	1d3b      	adds	r3, r7, #4
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d10c      	bne.n	800123e <HAL_RCC_OscConfig+0x876>
 8001224:	4b34      	ldr	r3, [pc, #208]	; (80012f8 <HAL_RCC_OscConfig+0x930>)
 8001226:	6a1b      	ldr	r3, [r3, #32]
 8001228:	4a33      	ldr	r2, [pc, #204]	; (80012f8 <HAL_RCC_OscConfig+0x930>)
 800122a:	f023 0301 	bic.w	r3, r3, #1
 800122e:	6213      	str	r3, [r2, #32]
 8001230:	4b31      	ldr	r3, [pc, #196]	; (80012f8 <HAL_RCC_OscConfig+0x930>)
 8001232:	6a1b      	ldr	r3, [r3, #32]
 8001234:	4a30      	ldr	r2, [pc, #192]	; (80012f8 <HAL_RCC_OscConfig+0x930>)
 8001236:	f023 0304 	bic.w	r3, r3, #4
 800123a:	6213      	str	r3, [r2, #32]
 800123c:	e01d      	b.n	800127a <HAL_RCC_OscConfig+0x8b2>
 800123e:	1d3b      	adds	r3, r7, #4
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	2b05      	cmp	r3, #5
 8001246:	d10c      	bne.n	8001262 <HAL_RCC_OscConfig+0x89a>
 8001248:	4b2b      	ldr	r3, [pc, #172]	; (80012f8 <HAL_RCC_OscConfig+0x930>)
 800124a:	6a1b      	ldr	r3, [r3, #32]
 800124c:	4a2a      	ldr	r2, [pc, #168]	; (80012f8 <HAL_RCC_OscConfig+0x930>)
 800124e:	f043 0304 	orr.w	r3, r3, #4
 8001252:	6213      	str	r3, [r2, #32]
 8001254:	4b28      	ldr	r3, [pc, #160]	; (80012f8 <HAL_RCC_OscConfig+0x930>)
 8001256:	6a1b      	ldr	r3, [r3, #32]
 8001258:	4a27      	ldr	r2, [pc, #156]	; (80012f8 <HAL_RCC_OscConfig+0x930>)
 800125a:	f043 0301 	orr.w	r3, r3, #1
 800125e:	6213      	str	r3, [r2, #32]
 8001260:	e00b      	b.n	800127a <HAL_RCC_OscConfig+0x8b2>
 8001262:	4b25      	ldr	r3, [pc, #148]	; (80012f8 <HAL_RCC_OscConfig+0x930>)
 8001264:	6a1b      	ldr	r3, [r3, #32]
 8001266:	4a24      	ldr	r2, [pc, #144]	; (80012f8 <HAL_RCC_OscConfig+0x930>)
 8001268:	f023 0301 	bic.w	r3, r3, #1
 800126c:	6213      	str	r3, [r2, #32]
 800126e:	4b22      	ldr	r3, [pc, #136]	; (80012f8 <HAL_RCC_OscConfig+0x930>)
 8001270:	6a1b      	ldr	r3, [r3, #32]
 8001272:	4a21      	ldr	r2, [pc, #132]	; (80012f8 <HAL_RCC_OscConfig+0x930>)
 8001274:	f023 0304 	bic.w	r3, r3, #4
 8001278:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800127a:	1d3b      	adds	r3, r7, #4
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d06b      	beq.n	800135c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001284:	f7ff f924 	bl	80004d0 <HAL_GetTick>
 8001288:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800128c:	e00b      	b.n	80012a6 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800128e:	f7ff f91f 	bl	80004d0 <HAL_GetTick>
 8001292:	4602      	mov	r2, r0
 8001294:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	f241 3288 	movw	r2, #5000	; 0x1388
 800129e:	4293      	cmp	r3, r2
 80012a0:	d901      	bls.n	80012a6 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e291      	b.n	80017ca <HAL_RCC_OscConfig+0xe02>
 80012a6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80012aa:	2202      	movs	r2, #2
 80012ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ae:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	fa93 f2a3 	rbit	r2, r3
 80012b8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80012c2:	2202      	movs	r2, #2
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	fa93 f2a3 	rbit	r2, r3
 80012d0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80012d4:	601a      	str	r2, [r3, #0]
  return result;
 80012d6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80012da:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012dc:	fab3 f383 	clz	r3, r3
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	095b      	lsrs	r3, r3, #5
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	f043 0302 	orr.w	r3, r3, #2
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d109      	bne.n	8001304 <HAL_RCC_OscConfig+0x93c>
 80012f0:	4b01      	ldr	r3, [pc, #4]	; (80012f8 <HAL_RCC_OscConfig+0x930>)
 80012f2:	6a1b      	ldr	r3, [r3, #32]
 80012f4:	e014      	b.n	8001320 <HAL_RCC_OscConfig+0x958>
 80012f6:	bf00      	nop
 80012f8:	40021000 	.word	0x40021000
 80012fc:	10908120 	.word	0x10908120
 8001300:	40007000 	.word	0x40007000
 8001304:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001308:	2202      	movs	r2, #2
 800130a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800130c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	fa93 f2a3 	rbit	r2, r3
 8001316:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	4bbb      	ldr	r3, [pc, #748]	; (800160c <HAL_RCC_OscConfig+0xc44>)
 800131e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001320:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001324:	2102      	movs	r1, #2
 8001326:	6011      	str	r1, [r2, #0]
 8001328:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800132c:	6812      	ldr	r2, [r2, #0]
 800132e:	fa92 f1a2 	rbit	r1, r2
 8001332:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001336:	6011      	str	r1, [r2, #0]
  return result;
 8001338:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800133c:	6812      	ldr	r2, [r2, #0]
 800133e:	fab2 f282 	clz	r2, r2
 8001342:	b2d2      	uxtb	r2, r2
 8001344:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001348:	b2d2      	uxtb	r2, r2
 800134a:	f002 021f 	and.w	r2, r2, #31
 800134e:	2101      	movs	r1, #1
 8001350:	fa01 f202 	lsl.w	r2, r1, r2
 8001354:	4013      	ands	r3, r2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d099      	beq.n	800128e <HAL_RCC_OscConfig+0x8c6>
 800135a:	e063      	b.n	8001424 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800135c:	f7ff f8b8 	bl	80004d0 <HAL_GetTick>
 8001360:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001364:	e00b      	b.n	800137e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001366:	f7ff f8b3 	bl	80004d0 <HAL_GetTick>
 800136a:	4602      	mov	r2, r0
 800136c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	f241 3288 	movw	r2, #5000	; 0x1388
 8001376:	4293      	cmp	r3, r2
 8001378:	d901      	bls.n	800137e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e225      	b.n	80017ca <HAL_RCC_OscConfig+0xe02>
 800137e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001382:	2202      	movs	r2, #2
 8001384:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001386:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	fa93 f2a3 	rbit	r2, r3
 8001390:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800139a:	2202      	movs	r2, #2
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	fa93 f2a3 	rbit	r2, r3
 80013a8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80013ac:	601a      	str	r2, [r3, #0]
  return result;
 80013ae:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80013b2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013b4:	fab3 f383 	clz	r3, r3
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	095b      	lsrs	r3, r3, #5
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	f043 0302 	orr.w	r3, r3, #2
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d102      	bne.n	80013ce <HAL_RCC_OscConfig+0xa06>
 80013c8:	4b90      	ldr	r3, [pc, #576]	; (800160c <HAL_RCC_OscConfig+0xc44>)
 80013ca:	6a1b      	ldr	r3, [r3, #32]
 80013cc:	e00d      	b.n	80013ea <HAL_RCC_OscConfig+0xa22>
 80013ce:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80013d2:	2202      	movs	r2, #2
 80013d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	fa93 f2a3 	rbit	r2, r3
 80013e0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	4b89      	ldr	r3, [pc, #548]	; (800160c <HAL_RCC_OscConfig+0xc44>)
 80013e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ea:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80013ee:	2102      	movs	r1, #2
 80013f0:	6011      	str	r1, [r2, #0]
 80013f2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80013f6:	6812      	ldr	r2, [r2, #0]
 80013f8:	fa92 f1a2 	rbit	r1, r2
 80013fc:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001400:	6011      	str	r1, [r2, #0]
  return result;
 8001402:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001406:	6812      	ldr	r2, [r2, #0]
 8001408:	fab2 f282 	clz	r2, r2
 800140c:	b2d2      	uxtb	r2, r2
 800140e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001412:	b2d2      	uxtb	r2, r2
 8001414:	f002 021f 	and.w	r2, r2, #31
 8001418:	2101      	movs	r1, #1
 800141a:	fa01 f202 	lsl.w	r2, r1, r2
 800141e:	4013      	ands	r3, r2
 8001420:	2b00      	cmp	r3, #0
 8001422:	d1a0      	bne.n	8001366 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001424:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001428:	2b01      	cmp	r3, #1
 800142a:	d105      	bne.n	8001438 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800142c:	4b77      	ldr	r3, [pc, #476]	; (800160c <HAL_RCC_OscConfig+0xc44>)
 800142e:	69db      	ldr	r3, [r3, #28]
 8001430:	4a76      	ldr	r2, [pc, #472]	; (800160c <HAL_RCC_OscConfig+0xc44>)
 8001432:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001436:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001438:	1d3b      	adds	r3, r7, #4
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	69db      	ldr	r3, [r3, #28]
 800143e:	2b00      	cmp	r3, #0
 8001440:	f000 81c2 	beq.w	80017c8 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001444:	4b71      	ldr	r3, [pc, #452]	; (800160c <HAL_RCC_OscConfig+0xc44>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f003 030c 	and.w	r3, r3, #12
 800144c:	2b08      	cmp	r3, #8
 800144e:	f000 819c 	beq.w	800178a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001452:	1d3b      	adds	r3, r7, #4
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	69db      	ldr	r3, [r3, #28]
 8001458:	2b02      	cmp	r3, #2
 800145a:	f040 8114 	bne.w	8001686 <HAL_RCC_OscConfig+0xcbe>
 800145e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001462:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001466:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001468:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	fa93 f2a3 	rbit	r2, r3
 8001472:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001476:	601a      	str	r2, [r3, #0]
  return result;
 8001478:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800147c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800147e:	fab3 f383 	clz	r3, r3
 8001482:	b2db      	uxtb	r3, r3
 8001484:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001488:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	461a      	mov	r2, r3
 8001490:	2300      	movs	r3, #0
 8001492:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001494:	f7ff f81c 	bl	80004d0 <HAL_GetTick>
 8001498:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800149c:	e009      	b.n	80014b2 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800149e:	f7ff f817 	bl	80004d0 <HAL_GetTick>
 80014a2:	4602      	mov	r2, r0
 80014a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e18b      	b.n	80017ca <HAL_RCC_OscConfig+0xe02>
 80014b2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80014b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014bc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	fa93 f2a3 	rbit	r2, r3
 80014c6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80014ca:	601a      	str	r2, [r3, #0]
  return result;
 80014cc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80014d0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014d2:	fab3 f383 	clz	r3, r3
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	095b      	lsrs	r3, r3, #5
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d102      	bne.n	80014ec <HAL_RCC_OscConfig+0xb24>
 80014e6:	4b49      	ldr	r3, [pc, #292]	; (800160c <HAL_RCC_OscConfig+0xc44>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	e01b      	b.n	8001524 <HAL_RCC_OscConfig+0xb5c>
 80014ec:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80014f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	fa93 f2a3 	rbit	r2, r3
 8001500:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800150a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	fa93 f2a3 	rbit	r2, r3
 800151a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	4b3a      	ldr	r3, [pc, #232]	; (800160c <HAL_RCC_OscConfig+0xc44>)
 8001522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001524:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001528:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800152c:	6011      	str	r1, [r2, #0]
 800152e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001532:	6812      	ldr	r2, [r2, #0]
 8001534:	fa92 f1a2 	rbit	r1, r2
 8001538:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800153c:	6011      	str	r1, [r2, #0]
  return result;
 800153e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001542:	6812      	ldr	r2, [r2, #0]
 8001544:	fab2 f282 	clz	r2, r2
 8001548:	b2d2      	uxtb	r2, r2
 800154a:	f042 0220 	orr.w	r2, r2, #32
 800154e:	b2d2      	uxtb	r2, r2
 8001550:	f002 021f 	and.w	r2, r2, #31
 8001554:	2101      	movs	r1, #1
 8001556:	fa01 f202 	lsl.w	r2, r1, r2
 800155a:	4013      	ands	r3, r2
 800155c:	2b00      	cmp	r3, #0
 800155e:	d19e      	bne.n	800149e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001560:	4b2a      	ldr	r3, [pc, #168]	; (800160c <HAL_RCC_OscConfig+0xc44>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001568:	1d3b      	adds	r3, r7, #4
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800156e:	1d3b      	adds	r3, r7, #4
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	6a1b      	ldr	r3, [r3, #32]
 8001574:	430b      	orrs	r3, r1
 8001576:	4925      	ldr	r1, [pc, #148]	; (800160c <HAL_RCC_OscConfig+0xc44>)
 8001578:	4313      	orrs	r3, r2
 800157a:	604b      	str	r3, [r1, #4]
 800157c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001580:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001584:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001586:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	fa93 f2a3 	rbit	r2, r3
 8001590:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001594:	601a      	str	r2, [r3, #0]
  return result;
 8001596:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800159a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800159c:	fab3 f383 	clz	r3, r3
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80015a6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	461a      	mov	r2, r3
 80015ae:	2301      	movs	r3, #1
 80015b0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b2:	f7fe ff8d 	bl	80004d0 <HAL_GetTick>
 80015b6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015ba:	e009      	b.n	80015d0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015bc:	f7fe ff88 	bl	80004d0 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d901      	bls.n	80015d0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e0fc      	b.n	80017ca <HAL_RCC_OscConfig+0xe02>
 80015d0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80015d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015da:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	fa93 f2a3 	rbit	r2, r3
 80015e4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80015e8:	601a      	str	r2, [r3, #0]
  return result;
 80015ea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80015ee:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015f0:	fab3 f383 	clz	r3, r3
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	095b      	lsrs	r3, r3, #5
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	f043 0301 	orr.w	r3, r3, #1
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	2b01      	cmp	r3, #1
 8001602:	d105      	bne.n	8001610 <HAL_RCC_OscConfig+0xc48>
 8001604:	4b01      	ldr	r3, [pc, #4]	; (800160c <HAL_RCC_OscConfig+0xc44>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	e01e      	b.n	8001648 <HAL_RCC_OscConfig+0xc80>
 800160a:	bf00      	nop
 800160c:	40021000 	.word	0x40021000
 8001610:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001614:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001618:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800161a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	fa93 f2a3 	rbit	r2, r3
 8001624:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800162e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	fa93 f2a3 	rbit	r2, r3
 800163e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	4b63      	ldr	r3, [pc, #396]	; (80017d4 <HAL_RCC_OscConfig+0xe0c>)
 8001646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001648:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800164c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001650:	6011      	str	r1, [r2, #0]
 8001652:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001656:	6812      	ldr	r2, [r2, #0]
 8001658:	fa92 f1a2 	rbit	r1, r2
 800165c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001660:	6011      	str	r1, [r2, #0]
  return result;
 8001662:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001666:	6812      	ldr	r2, [r2, #0]
 8001668:	fab2 f282 	clz	r2, r2
 800166c:	b2d2      	uxtb	r2, r2
 800166e:	f042 0220 	orr.w	r2, r2, #32
 8001672:	b2d2      	uxtb	r2, r2
 8001674:	f002 021f 	and.w	r2, r2, #31
 8001678:	2101      	movs	r1, #1
 800167a:	fa01 f202 	lsl.w	r2, r1, r2
 800167e:	4013      	ands	r3, r2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d09b      	beq.n	80015bc <HAL_RCC_OscConfig+0xbf4>
 8001684:	e0a0      	b.n	80017c8 <HAL_RCC_OscConfig+0xe00>
 8001686:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800168a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800168e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001690:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	fa93 f2a3 	rbit	r2, r3
 800169a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800169e:	601a      	str	r2, [r3, #0]
  return result;
 80016a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016a4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016a6:	fab3 f383 	clz	r3, r3
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80016b0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	461a      	mov	r2, r3
 80016b8:	2300      	movs	r3, #0
 80016ba:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016bc:	f7fe ff08 	bl	80004d0 <HAL_GetTick>
 80016c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016c4:	e009      	b.n	80016da <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016c6:	f7fe ff03 	bl	80004d0 <HAL_GetTick>
 80016ca:	4602      	mov	r2, r0
 80016cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e077      	b.n	80017ca <HAL_RCC_OscConfig+0xe02>
 80016da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	fa93 f2a3 	rbit	r2, r3
 80016ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016f2:	601a      	str	r2, [r3, #0]
  return result;
 80016f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016f8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016fa:	fab3 f383 	clz	r3, r3
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	095b      	lsrs	r3, r3, #5
 8001702:	b2db      	uxtb	r3, r3
 8001704:	f043 0301 	orr.w	r3, r3, #1
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b01      	cmp	r3, #1
 800170c:	d102      	bne.n	8001714 <HAL_RCC_OscConfig+0xd4c>
 800170e:	4b31      	ldr	r3, [pc, #196]	; (80017d4 <HAL_RCC_OscConfig+0xe0c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	e01b      	b.n	800174c <HAL_RCC_OscConfig+0xd84>
 8001714:	f107 0320 	add.w	r3, r7, #32
 8001718:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800171c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800171e:	f107 0320 	add.w	r3, r7, #32
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	fa93 f2a3 	rbit	r2, r3
 8001728:	f107 031c 	add.w	r3, r7, #28
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	f107 0318 	add.w	r3, r7, #24
 8001732:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	f107 0318 	add.w	r3, r7, #24
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	fa93 f2a3 	rbit	r2, r3
 8001742:	f107 0314 	add.w	r3, r7, #20
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	4b22      	ldr	r3, [pc, #136]	; (80017d4 <HAL_RCC_OscConfig+0xe0c>)
 800174a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174c:	f107 0210 	add.w	r2, r7, #16
 8001750:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001754:	6011      	str	r1, [r2, #0]
 8001756:	f107 0210 	add.w	r2, r7, #16
 800175a:	6812      	ldr	r2, [r2, #0]
 800175c:	fa92 f1a2 	rbit	r1, r2
 8001760:	f107 020c 	add.w	r2, r7, #12
 8001764:	6011      	str	r1, [r2, #0]
  return result;
 8001766:	f107 020c 	add.w	r2, r7, #12
 800176a:	6812      	ldr	r2, [r2, #0]
 800176c:	fab2 f282 	clz	r2, r2
 8001770:	b2d2      	uxtb	r2, r2
 8001772:	f042 0220 	orr.w	r2, r2, #32
 8001776:	b2d2      	uxtb	r2, r2
 8001778:	f002 021f 	and.w	r2, r2, #31
 800177c:	2101      	movs	r1, #1
 800177e:	fa01 f202 	lsl.w	r2, r1, r2
 8001782:	4013      	ands	r3, r2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d19e      	bne.n	80016c6 <HAL_RCC_OscConfig+0xcfe>
 8001788:	e01e      	b.n	80017c8 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800178a:	1d3b      	adds	r3, r7, #4
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	69db      	ldr	r3, [r3, #28]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d101      	bne.n	8001798 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e018      	b.n	80017ca <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001798:	4b0e      	ldr	r3, [pc, #56]	; (80017d4 <HAL_RCC_OscConfig+0xe0c>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80017a0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80017a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80017a8:	1d3b      	adds	r3, r7, #4
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	6a1b      	ldr	r3, [r3, #32]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d108      	bne.n	80017c4 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80017b2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80017b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80017ba:	1d3b      	adds	r3, r7, #4
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d001      	beq.n	80017c8 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e000      	b.n	80017ca <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40021000 	.word	0x40021000

080017d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b09e      	sub	sp, #120	; 0x78
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80017e2:	2300      	movs	r3, #0
 80017e4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d101      	bne.n	80017f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e162      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017f0:	4b90      	ldr	r3, [pc, #576]	; (8001a34 <HAL_RCC_ClockConfig+0x25c>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0307 	and.w	r3, r3, #7
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d910      	bls.n	8001820 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017fe:	4b8d      	ldr	r3, [pc, #564]	; (8001a34 <HAL_RCC_ClockConfig+0x25c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f023 0207 	bic.w	r2, r3, #7
 8001806:	498b      	ldr	r1, [pc, #556]	; (8001a34 <HAL_RCC_ClockConfig+0x25c>)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	4313      	orrs	r3, r2
 800180c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800180e:	4b89      	ldr	r3, [pc, #548]	; (8001a34 <HAL_RCC_ClockConfig+0x25c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	683a      	ldr	r2, [r7, #0]
 8001818:	429a      	cmp	r2, r3
 800181a:	d001      	beq.n	8001820 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e14a      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d008      	beq.n	800183e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800182c:	4b82      	ldr	r3, [pc, #520]	; (8001a38 <HAL_RCC_ClockConfig+0x260>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	497f      	ldr	r1, [pc, #508]	; (8001a38 <HAL_RCC_ClockConfig+0x260>)
 800183a:	4313      	orrs	r3, r2
 800183c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	2b00      	cmp	r3, #0
 8001848:	f000 80dc 	beq.w	8001a04 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d13c      	bne.n	80018ce <HAL_RCC_ClockConfig+0xf6>
 8001854:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001858:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800185a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800185c:	fa93 f3a3 	rbit	r3, r3
 8001860:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001862:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001864:	fab3 f383 	clz	r3, r3
 8001868:	b2db      	uxtb	r3, r3
 800186a:	095b      	lsrs	r3, r3, #5
 800186c:	b2db      	uxtb	r3, r3
 800186e:	f043 0301 	orr.w	r3, r3, #1
 8001872:	b2db      	uxtb	r3, r3
 8001874:	2b01      	cmp	r3, #1
 8001876:	d102      	bne.n	800187e <HAL_RCC_ClockConfig+0xa6>
 8001878:	4b6f      	ldr	r3, [pc, #444]	; (8001a38 <HAL_RCC_ClockConfig+0x260>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	e00f      	b.n	800189e <HAL_RCC_ClockConfig+0xc6>
 800187e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001882:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001884:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001886:	fa93 f3a3 	rbit	r3, r3
 800188a:	667b      	str	r3, [r7, #100]	; 0x64
 800188c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001890:	663b      	str	r3, [r7, #96]	; 0x60
 8001892:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001894:	fa93 f3a3 	rbit	r3, r3
 8001898:	65fb      	str	r3, [r7, #92]	; 0x5c
 800189a:	4b67      	ldr	r3, [pc, #412]	; (8001a38 <HAL_RCC_ClockConfig+0x260>)
 800189c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018a2:	65ba      	str	r2, [r7, #88]	; 0x58
 80018a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80018a6:	fa92 f2a2 	rbit	r2, r2
 80018aa:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80018ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80018ae:	fab2 f282 	clz	r2, r2
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	f042 0220 	orr.w	r2, r2, #32
 80018b8:	b2d2      	uxtb	r2, r2
 80018ba:	f002 021f 	and.w	r2, r2, #31
 80018be:	2101      	movs	r1, #1
 80018c0:	fa01 f202 	lsl.w	r2, r1, r2
 80018c4:	4013      	ands	r3, r2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d17b      	bne.n	80019c2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e0f3      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d13c      	bne.n	8001950 <HAL_RCC_ClockConfig+0x178>
 80018d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018da:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018de:	fa93 f3a3 	rbit	r3, r3
 80018e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80018e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018e6:	fab3 f383 	clz	r3, r3
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	095b      	lsrs	r3, r3, #5
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d102      	bne.n	8001900 <HAL_RCC_ClockConfig+0x128>
 80018fa:	4b4f      	ldr	r3, [pc, #316]	; (8001a38 <HAL_RCC_ClockConfig+0x260>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	e00f      	b.n	8001920 <HAL_RCC_ClockConfig+0x148>
 8001900:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001904:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001906:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001908:	fa93 f3a3 	rbit	r3, r3
 800190c:	647b      	str	r3, [r7, #68]	; 0x44
 800190e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001912:	643b      	str	r3, [r7, #64]	; 0x40
 8001914:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001916:	fa93 f3a3 	rbit	r3, r3
 800191a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800191c:	4b46      	ldr	r3, [pc, #280]	; (8001a38 <HAL_RCC_ClockConfig+0x260>)
 800191e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001920:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001924:	63ba      	str	r2, [r7, #56]	; 0x38
 8001926:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001928:	fa92 f2a2 	rbit	r2, r2
 800192c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800192e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001930:	fab2 f282 	clz	r2, r2
 8001934:	b2d2      	uxtb	r2, r2
 8001936:	f042 0220 	orr.w	r2, r2, #32
 800193a:	b2d2      	uxtb	r2, r2
 800193c:	f002 021f 	and.w	r2, r2, #31
 8001940:	2101      	movs	r1, #1
 8001942:	fa01 f202 	lsl.w	r2, r1, r2
 8001946:	4013      	ands	r3, r2
 8001948:	2b00      	cmp	r3, #0
 800194a:	d13a      	bne.n	80019c2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e0b2      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x2de>
 8001950:	2302      	movs	r3, #2
 8001952:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001956:	fa93 f3a3 	rbit	r3, r3
 800195a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800195c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800195e:	fab3 f383 	clz	r3, r3
 8001962:	b2db      	uxtb	r3, r3
 8001964:	095b      	lsrs	r3, r3, #5
 8001966:	b2db      	uxtb	r3, r3
 8001968:	f043 0301 	orr.w	r3, r3, #1
 800196c:	b2db      	uxtb	r3, r3
 800196e:	2b01      	cmp	r3, #1
 8001970:	d102      	bne.n	8001978 <HAL_RCC_ClockConfig+0x1a0>
 8001972:	4b31      	ldr	r3, [pc, #196]	; (8001a38 <HAL_RCC_ClockConfig+0x260>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	e00d      	b.n	8001994 <HAL_RCC_ClockConfig+0x1bc>
 8001978:	2302      	movs	r3, #2
 800197a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800197e:	fa93 f3a3 	rbit	r3, r3
 8001982:	627b      	str	r3, [r7, #36]	; 0x24
 8001984:	2302      	movs	r3, #2
 8001986:	623b      	str	r3, [r7, #32]
 8001988:	6a3b      	ldr	r3, [r7, #32]
 800198a:	fa93 f3a3 	rbit	r3, r3
 800198e:	61fb      	str	r3, [r7, #28]
 8001990:	4b29      	ldr	r3, [pc, #164]	; (8001a38 <HAL_RCC_ClockConfig+0x260>)
 8001992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001994:	2202      	movs	r2, #2
 8001996:	61ba      	str	r2, [r7, #24]
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	fa92 f2a2 	rbit	r2, r2
 800199e:	617a      	str	r2, [r7, #20]
  return result;
 80019a0:	697a      	ldr	r2, [r7, #20]
 80019a2:	fab2 f282 	clz	r2, r2
 80019a6:	b2d2      	uxtb	r2, r2
 80019a8:	f042 0220 	orr.w	r2, r2, #32
 80019ac:	b2d2      	uxtb	r2, r2
 80019ae:	f002 021f 	and.w	r2, r2, #31
 80019b2:	2101      	movs	r1, #1
 80019b4:	fa01 f202 	lsl.w	r2, r1, r2
 80019b8:	4013      	ands	r3, r2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d101      	bne.n	80019c2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e079      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019c2:	4b1d      	ldr	r3, [pc, #116]	; (8001a38 <HAL_RCC_ClockConfig+0x260>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f023 0203 	bic.w	r2, r3, #3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	491a      	ldr	r1, [pc, #104]	; (8001a38 <HAL_RCC_ClockConfig+0x260>)
 80019d0:	4313      	orrs	r3, r2
 80019d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019d4:	f7fe fd7c 	bl	80004d0 <HAL_GetTick>
 80019d8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019da:	e00a      	b.n	80019f2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019dc:	f7fe fd78 	bl	80004d0 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e061      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019f2:	4b11      	ldr	r3, [pc, #68]	; (8001a38 <HAL_RCC_ClockConfig+0x260>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f003 020c 	and.w	r2, r3, #12
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d1eb      	bne.n	80019dc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a04:	4b0b      	ldr	r3, [pc, #44]	; (8001a34 <HAL_RCC_ClockConfig+0x25c>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0307 	and.w	r3, r3, #7
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d214      	bcs.n	8001a3c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a12:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <HAL_RCC_ClockConfig+0x25c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f023 0207 	bic.w	r2, r3, #7
 8001a1a:	4906      	ldr	r1, [pc, #24]	; (8001a34 <HAL_RCC_ClockConfig+0x25c>)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a22:	4b04      	ldr	r3, [pc, #16]	; (8001a34 <HAL_RCC_ClockConfig+0x25c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0307 	and.w	r3, r3, #7
 8001a2a:	683a      	ldr	r2, [r7, #0]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d005      	beq.n	8001a3c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e040      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x2de>
 8001a34:	40022000 	.word	0x40022000
 8001a38:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0304 	and.w	r3, r3, #4
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d008      	beq.n	8001a5a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a48:	4b1d      	ldr	r3, [pc, #116]	; (8001ac0 <HAL_RCC_ClockConfig+0x2e8>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	491a      	ldr	r1, [pc, #104]	; (8001ac0 <HAL_RCC_ClockConfig+0x2e8>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0308 	and.w	r3, r3, #8
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d009      	beq.n	8001a7a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a66:	4b16      	ldr	r3, [pc, #88]	; (8001ac0 <HAL_RCC_ClockConfig+0x2e8>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	691b      	ldr	r3, [r3, #16]
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	4912      	ldr	r1, [pc, #72]	; (8001ac0 <HAL_RCC_ClockConfig+0x2e8>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001a7a:	f000 f829 	bl	8001ad0 <HAL_RCC_GetSysClockFreq>
 8001a7e:	4601      	mov	r1, r0
 8001a80:	4b0f      	ldr	r3, [pc, #60]	; (8001ac0 <HAL_RCC_ClockConfig+0x2e8>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a88:	22f0      	movs	r2, #240	; 0xf0
 8001a8a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	fa92 f2a2 	rbit	r2, r2
 8001a92:	60fa      	str	r2, [r7, #12]
  return result;
 8001a94:	68fa      	ldr	r2, [r7, #12]
 8001a96:	fab2 f282 	clz	r2, r2
 8001a9a:	b2d2      	uxtb	r2, r2
 8001a9c:	40d3      	lsrs	r3, r2
 8001a9e:	4a09      	ldr	r2, [pc, #36]	; (8001ac4 <HAL_RCC_ClockConfig+0x2ec>)
 8001aa0:	5cd3      	ldrb	r3, [r2, r3]
 8001aa2:	fa21 f303 	lsr.w	r3, r1, r3
 8001aa6:	4a08      	ldr	r2, [pc, #32]	; (8001ac8 <HAL_RCC_ClockConfig+0x2f0>)
 8001aa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001aaa:	4b08      	ldr	r3, [pc, #32]	; (8001acc <HAL_RCC_ClockConfig+0x2f4>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7fe fcca 	bl	8000448 <HAL_InitTick>
  
  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3778      	adds	r7, #120	; 0x78
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	08001c14 	.word	0x08001c14
 8001ac8:	20000000 	.word	0x20000000
 8001acc:	20000004 	.word	0x20000004

08001ad0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b08b      	sub	sp, #44	; 0x2c
 8001ad4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61fb      	str	r3, [r7, #28]
 8001ada:	2300      	movs	r3, #0
 8001adc:	61bb      	str	r3, [r7, #24]
 8001ade:	2300      	movs	r3, #0
 8001ae0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001aea:	4b29      	ldr	r3, [pc, #164]	; (8001b90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	f003 030c 	and.w	r3, r3, #12
 8001af6:	2b04      	cmp	r3, #4
 8001af8:	d002      	beq.n	8001b00 <HAL_RCC_GetSysClockFreq+0x30>
 8001afa:	2b08      	cmp	r3, #8
 8001afc:	d003      	beq.n	8001b06 <HAL_RCC_GetSysClockFreq+0x36>
 8001afe:	e03c      	b.n	8001b7a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b00:	4b24      	ldr	r3, [pc, #144]	; (8001b94 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001b02:	623b      	str	r3, [r7, #32]
      break;
 8001b04:	e03c      	b.n	8001b80 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001b0c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001b10:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b12:	68ba      	ldr	r2, [r7, #8]
 8001b14:	fa92 f2a2 	rbit	r2, r2
 8001b18:	607a      	str	r2, [r7, #4]
  return result;
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	fab2 f282 	clz	r2, r2
 8001b20:	b2d2      	uxtb	r2, r2
 8001b22:	40d3      	lsrs	r3, r2
 8001b24:	4a1c      	ldr	r2, [pc, #112]	; (8001b98 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001b26:	5cd3      	ldrb	r3, [r2, r3]
 8001b28:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001b2a:	4b19      	ldr	r3, [pc, #100]	; (8001b90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b2e:	f003 030f 	and.w	r3, r3, #15
 8001b32:	220f      	movs	r2, #15
 8001b34:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	fa92 f2a2 	rbit	r2, r2
 8001b3c:	60fa      	str	r2, [r7, #12]
  return result;
 8001b3e:	68fa      	ldr	r2, [r7, #12]
 8001b40:	fab2 f282 	clz	r2, r2
 8001b44:	b2d2      	uxtb	r2, r2
 8001b46:	40d3      	lsrs	r3, r2
 8001b48:	4a14      	ldr	r2, [pc, #80]	; (8001b9c <HAL_RCC_GetSysClockFreq+0xcc>)
 8001b4a:	5cd3      	ldrb	r3, [r2, r3]
 8001b4c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d008      	beq.n	8001b6a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001b58:	4a0e      	ldr	r2, [pc, #56]	; (8001b94 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	fb02 f303 	mul.w	r3, r2, r3
 8001b66:	627b      	str	r3, [r7, #36]	; 0x24
 8001b68:	e004      	b.n	8001b74 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	4a0c      	ldr	r2, [pc, #48]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001b6e:	fb02 f303 	mul.w	r3, r2, r3
 8001b72:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b76:	623b      	str	r3, [r7, #32]
      break;
 8001b78:	e002      	b.n	8001b80 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b7a:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001b7c:	623b      	str	r3, [r7, #32]
      break;
 8001b7e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b80:	6a3b      	ldr	r3, [r7, #32]
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	372c      	adds	r7, #44	; 0x2c
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	40021000 	.word	0x40021000
 8001b94:	007a1200 	.word	0x007a1200
 8001b98:	08001c24 	.word	0x08001c24
 8001b9c:	08001c34 	.word	0x08001c34
 8001ba0:	003d0900 	.word	0x003d0900

08001ba4 <__libc_init_array>:
 8001ba4:	b570      	push	{r4, r5, r6, lr}
 8001ba6:	4d0d      	ldr	r5, [pc, #52]	; (8001bdc <__libc_init_array+0x38>)
 8001ba8:	4c0d      	ldr	r4, [pc, #52]	; (8001be0 <__libc_init_array+0x3c>)
 8001baa:	1b64      	subs	r4, r4, r5
 8001bac:	10a4      	asrs	r4, r4, #2
 8001bae:	2600      	movs	r6, #0
 8001bb0:	42a6      	cmp	r6, r4
 8001bb2:	d109      	bne.n	8001bc8 <__libc_init_array+0x24>
 8001bb4:	4d0b      	ldr	r5, [pc, #44]	; (8001be4 <__libc_init_array+0x40>)
 8001bb6:	4c0c      	ldr	r4, [pc, #48]	; (8001be8 <__libc_init_array+0x44>)
 8001bb8:	f000 f820 	bl	8001bfc <_init>
 8001bbc:	1b64      	subs	r4, r4, r5
 8001bbe:	10a4      	asrs	r4, r4, #2
 8001bc0:	2600      	movs	r6, #0
 8001bc2:	42a6      	cmp	r6, r4
 8001bc4:	d105      	bne.n	8001bd2 <__libc_init_array+0x2e>
 8001bc6:	bd70      	pop	{r4, r5, r6, pc}
 8001bc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bcc:	4798      	blx	r3
 8001bce:	3601      	adds	r6, #1
 8001bd0:	e7ee      	b.n	8001bb0 <__libc_init_array+0xc>
 8001bd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bd6:	4798      	blx	r3
 8001bd8:	3601      	adds	r6, #1
 8001bda:	e7f2      	b.n	8001bc2 <__libc_init_array+0x1e>
 8001bdc:	08001c44 	.word	0x08001c44
 8001be0:	08001c44 	.word	0x08001c44
 8001be4:	08001c44 	.word	0x08001c44
 8001be8:	08001c48 	.word	0x08001c48

08001bec <memset>:
 8001bec:	4402      	add	r2, r0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d100      	bne.n	8001bf6 <memset+0xa>
 8001bf4:	4770      	bx	lr
 8001bf6:	f803 1b01 	strb.w	r1, [r3], #1
 8001bfa:	e7f9      	b.n	8001bf0 <memset+0x4>

08001bfc <_init>:
 8001bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bfe:	bf00      	nop
 8001c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c02:	bc08      	pop	{r3}
 8001c04:	469e      	mov	lr, r3
 8001c06:	4770      	bx	lr

08001c08 <_fini>:
 8001c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c0a:	bf00      	nop
 8001c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c0e:	bc08      	pop	{r3}
 8001c10:	469e      	mov	lr, r3
 8001c12:	4770      	bx	lr
